// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getListingByImageNotLoaded = `-- name: GetListingByImageNotLoaded :one
SELECT id, external_id
FROM listings
WHERE source = $1::source
  AND image_loaded = FALSE
LIMIT 1
`

type GetListingByImageNotLoadedRow struct {
	ID         int64
	ExternalID string
}

func (q *Queries) GetListingByImageNotLoaded(ctx context.Context, source Source) (*GetListingByImageNotLoadedRow, error) {
	row := q.db.QueryRow(ctx, getListingByImageNotLoaded, source)
	var i GetListingByImageNotLoadedRow
	err := row.Scan(&i.ID, &i.ExternalID)
	return &i, err
}

const getListingImagesByListingIds = `-- name: GetListingImagesByListingIds :many
SELECT listing_id, url
FROM listing_images
WHERE listing_id = ANY ($1::bigint[])
`

type GetListingImagesByListingIdsRow struct {
	ListingID int64
	Url       string
}

func (q *Queries) GetListingImagesByListingIds(ctx context.Context, ids []int64) ([]*GetListingImagesByListingIdsRow, error) {
	rows, err := q.db.Query(ctx, getListingImagesByListingIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetListingImagesByListingIdsRow
	for rows.Next() {
		var i GetListingImagesByListingIdsRow
		if err := rows.Scan(&i.ListingID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingsNextPage = `-- name: GetListingsNextPage :many
SELECT id, source, external_id, address, floor_area, price, occupied, image_loaded
FROM listings
WHERE id > $1::bigint
  AND address ILIKE $2::text
  AND source = ANY ($3::source[])
  AND (coalesce($4, occupied) IS NULL OR occupied = coalesce($4, occupied))
ORDER BY id
LIMIT $5::int
`

type GetListingsNextPageParams struct {
	After    int64
	Search   string
	Sources  []Source
	Occupied interface{}
	RowLimit int32
}

func (q *Queries) GetListingsNextPage(ctx context.Context, arg GetListingsNextPageParams) ([]*Listing, error) {
	rows, err := q.db.Query(ctx, getListingsNextPage,
		arg.After,
		arg.Search,
		arg.Sources,
		arg.Occupied,
		arg.RowLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.ExternalID,
			&i.Address,
			&i.FloorArea,
			&i.Price,
			&i.Occupied,
			&i.ImageLoaded,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingsPreviousPage = `-- name: GetListingsPreviousPage :many
SELECT id, source, external_id, address, floor_area, price, occupied, image_loaded
FROM listings
WHERE id < $1::bigint
  AND address ILIKE $2::text
  AND source = ANY ($3::source[])
  AND (coalesce($4, occupied) IS NULL OR occupied = coalesce($4, occupied))
ORDER BY id DESC
LIMIT $5::int
`

type GetListingsPreviousPageParams struct {
	Before   int64
	Search   string
	Sources  []Source
	Occupied interface{}
	RowLimit int32
}

func (q *Queries) GetListingsPreviousPage(ctx context.Context, arg GetListingsPreviousPageParams) ([]*Listing, error) {
	rows, err := q.db.Query(ctx, getListingsPreviousPage,
		arg.Before,
		arg.Search,
		arg.Sources,
		arg.Occupied,
		arg.RowLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.ExternalID,
			&i.Address,
			&i.FloorArea,
			&i.Price,
			&i.Occupied,
			&i.ImageLoaded,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertListingImages = `-- name: InsertListingImages :exec
INSERT INTO listing_images (listing_id, url)
VALUES (unnest($1::bigint[]), unnest($2::text[]))
`

type InsertListingImagesParams struct {
	ListingIds []int64
	Urls       []string
}

func (q *Queries) InsertListingImages(ctx context.Context, arg InsertListingImagesParams) error {
	_, err := q.db.Exec(ctx, insertListingImages, arg.ListingIds, arg.Urls)
	return err
}

const insertListings = `-- name: InsertListings :exec
INSERT INTO listings (source, external_id, address, floor_area, price, occupied)
VALUES (unnest($1::source[]),
        unnest($2::text[]),
        unnest($3::text[]),
        unnest($4::numeric(8, 2)[]),
        unnest($5::bigint[]),
        unnest($6::boolean[]))
ON CONFLICT (source, external_id) DO UPDATE
    SET address    = EXCLUDED.address,
        floor_area = EXCLUDED.floor_area,
        price      = EXCLUDED.price,
        occupied   = EXCLUDED.occupied
`

type InsertListingsParams struct {
	Sources     []Source
	ExternalIds []string
	Addresses   []string
	FloorAreas  []pgtype.Numeric
	Prices      []int64
	Occupied    []bool
}

func (q *Queries) InsertListings(ctx context.Context, arg InsertListingsParams) error {
	_, err := q.db.Exec(ctx, insertListings,
		arg.Sources,
		arg.ExternalIds,
		arg.Addresses,
		arg.FloorAreas,
		arg.Prices,
		arg.Occupied,
	)
	return err
}

const updateListingsImageLoaded = `-- name: UpdateListingsImageLoaded :exec
UPDATE listings
SET image_loaded = $1::boolean
WHERE listings.id = $2::bigint
`

type UpdateListingsImageLoadedParams struct {
	ImageLoaded bool
	ID          int64
}

func (q *Queries) UpdateListingsImageLoaded(ctx context.Context, arg UpdateListingsImageLoadedParams) error {
	_, err := q.db.Exec(ctx, updateListingsImageLoaded, arg.ImageLoaded, arg.ID)
	return err
}
