/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: listing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace listing {
    export class GetListingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GetListingRequest {
            const message = new GetListingRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingRequest {
            return GetListingRequest.deserialize(bytes);
        }
    }
    export class GetListingsInBoundaryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            minLng?: number;
            maxLng?: number;
            minLat?: number;
            maxLat?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("minLng" in data && data.minLng != undefined) {
                    this.minLng = data.minLng;
                }
                if ("maxLng" in data && data.maxLng != undefined) {
                    this.maxLng = data.maxLng;
                }
                if ("minLat" in data && data.minLat != undefined) {
                    this.minLat = data.minLat;
                }
                if ("maxLat" in data && data.maxLat != undefined) {
                    this.maxLat = data.maxLat;
                }
            }
        }
        get minLng() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set minLng(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get maxLng() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set maxLng(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get minLat() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set minLat(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get maxLat() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set maxLat(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            minLng?: number;
            maxLng?: number;
            minLat?: number;
            maxLat?: number;
        }): GetListingsInBoundaryRequest {
            const message = new GetListingsInBoundaryRequest({});
            if (data.minLng != null) {
                message.minLng = data.minLng;
            }
            if (data.maxLng != null) {
                message.maxLng = data.maxLng;
            }
            if (data.minLat != null) {
                message.minLat = data.minLat;
            }
            if (data.maxLat != null) {
                message.maxLat = data.maxLat;
            }
            return message;
        }
        toObject() {
            const data: {
                minLng?: number;
                maxLng?: number;
                minLat?: number;
                maxLat?: number;
            } = {};
            if (this.minLng != null) {
                data.minLng = this.minLng;
            }
            if (this.maxLng != null) {
                data.maxLng = this.maxLng;
            }
            if (this.minLat != null) {
                data.minLat = this.minLat;
            }
            if (this.maxLat != null) {
                data.maxLat = this.maxLat;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.minLng != 0)
                writer.writeDouble(1, this.minLng);
            if (this.maxLng != 0)
                writer.writeDouble(2, this.maxLng);
            if (this.minLat != 0)
                writer.writeDouble(3, this.minLat);
            if (this.maxLat != 0)
                writer.writeDouble(4, this.maxLat);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingsInBoundaryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingsInBoundaryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.minLng = reader.readDouble();
                        break;
                    case 2:
                        message.maxLng = reader.readDouble();
                        break;
                    case 3:
                        message.minLat = reader.readDouble();
                        break;
                    case 4:
                        message.maxLat = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingsInBoundaryRequest {
            return GetListingsInBoundaryRequest.deserialize(bytes);
        }
    }
    export class Listing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            address?: string;
            price?: number;
            floorArea?: number;
            lotArea?: number;
            lng?: number;
            lat?: number;
            imageUrls?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("floorArea" in data && data.floorArea != undefined) {
                    this.floorArea = data.floorArea;
                }
                if ("lotArea" in data && data.lotArea != undefined) {
                    this.lotArea = data.lotArea;
                }
                if ("lng" in data && data.lng != undefined) {
                    this.lng = data.lng;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("imageUrls" in data && data.imageUrls != undefined) {
                    this.imageUrls = data.imageUrls;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get floorArea() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set floorArea(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get lotArea() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set lotArea(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lng() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lng(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get imageUrls() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set imageUrls(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: number;
            address?: string;
            price?: number;
            floorArea?: number;
            lotArea?: number;
            lng?: number;
            lat?: number;
            imageUrls?: string[];
        }): Listing {
            const message = new Listing({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.floorArea != null) {
                message.floorArea = data.floorArea;
            }
            if (data.lotArea != null) {
                message.lotArea = data.lotArea;
            }
            if (data.lng != null) {
                message.lng = data.lng;
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.imageUrls != null) {
                message.imageUrls = data.imageUrls;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                address?: string;
                price?: number;
                floorArea?: number;
                lotArea?: number;
                lng?: number;
                lat?: number;
                imageUrls?: string[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.floorArea != null) {
                data.floorArea = this.floorArea;
            }
            if (this.lotArea != null) {
                data.lotArea = this.lotArea;
            }
            if (this.lng != null) {
                data.lng = this.lng;
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.imageUrls != null) {
                data.imageUrls = this.imageUrls;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (this.price != 0)
                writer.writeInt64(3, this.price);
            if (this.floorArea != 0)
                writer.writeDouble(4, this.floorArea);
            if (this.lotArea != 0)
                writer.writeDouble(5, this.lotArea);
            if (this.lng != 0)
                writer.writeDouble(6, this.lng);
            if (this.lat != 0)
                writer.writeDouble(7, this.lat);
            if (this.imageUrls.length)
                writer.writeRepeatedString(8, this.imageUrls);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Listing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Listing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readInt64();
                        break;
                    case 4:
                        message.floorArea = reader.readDouble();
                        break;
                    case 5:
                        message.lotArea = reader.readDouble();
                        break;
                    case 6:
                        message.lng = reader.readDouble();
                        break;
                    case 7:
                        message.lat = reader.readDouble();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Listing {
            return Listing.deserialize(bytes);
        }
    }
    export class GetListingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listing?: Listing;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listing" in data && data.listing != undefined) {
                    this.listing = data.listing;
                }
            }
        }
        get listing() {
            return pb_1.Message.getWrapperField(this, Listing, 1) as Listing;
        }
        set listing(value: Listing) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasListing() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            listing?: ReturnType<typeof Listing.prototype.toObject>;
        }): GetListingResponse {
            const message = new GetListingResponse({});
            if (data.listing != null) {
                message.listing = Listing.fromObject(data.listing);
            }
            return message;
        }
        toObject() {
            const data: {
                listing?: ReturnType<typeof Listing.prototype.toObject>;
            } = {};
            if (this.listing != null) {
                data.listing = this.listing.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasListing)
                writer.writeMessage(1, this.listing, () => this.listing.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listing, () => message.listing = Listing.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingResponse {
            return GetListingResponse.deserialize(bytes);
        }
    }
    export class GetListingsInBoundaryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listings?: Listing[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listings" in data && data.listings != undefined) {
                    this.listings = data.listings;
                }
            }
        }
        get listings() {
            return pb_1.Message.getRepeatedWrapperField(this, Listing, 1) as Listing[];
        }
        set listings(value: Listing[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            listings?: ReturnType<typeof Listing.prototype.toObject>[];
        }): GetListingsInBoundaryResponse {
            const message = new GetListingsInBoundaryResponse({});
            if (data.listings != null) {
                message.listings = data.listings.map(item => Listing.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                listings?: ReturnType<typeof Listing.prototype.toObject>[];
            } = {};
            if (this.listings != null) {
                data.listings = this.listings.map((item: Listing) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.listings.length)
                writer.writeRepeatedMessage(1, this.listings, (item: Listing) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetListingsInBoundaryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetListingsInBoundaryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Listing.deserialize(reader), Listing));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetListingsInBoundaryResponse {
            return GetListingsInBoundaryResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedListingServiceService {
        static definition = {
            GetListing: {
                path: "/listing.ListingService/GetListing",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetListingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetListingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetListingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetListingResponse.deserialize(new Uint8Array(bytes))
            },
            GetListingsInBoundary: {
                path: "/listing.ListingService/GetListingsInBoundary",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetListingsInBoundaryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetListingsInBoundaryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetListingsInBoundaryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetListingsInBoundaryResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetListing(call: grpc_1.ServerUnaryCall<GetListingRequest, GetListingResponse>, callback: grpc_1.sendUnaryData<GetListingResponse>): void;
        abstract GetListingsInBoundary(call: grpc_1.ServerUnaryCall<GetListingsInBoundaryRequest, GetListingsInBoundaryResponse>, callback: grpc_1.sendUnaryData<GetListingsInBoundaryResponse>): void;
    }
    export class ListingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedListingServiceService.definition, "ListingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetListing: GrpcUnaryServiceInterface<GetListingRequest, GetListingResponse> = (message: GetListingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetListingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetListingResponse>, callback?: grpc_1.requestCallback<GetListingResponse>): grpc_1.ClientUnaryCall => {
            return super.GetListing(message, metadata, options, callback);
        };
        GetListingsInBoundary: GrpcUnaryServiceInterface<GetListingsInBoundaryRequest, GetListingsInBoundaryResponse> = (message: GetListingsInBoundaryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetListingsInBoundaryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetListingsInBoundaryResponse>, callback?: grpc_1.requestCallback<GetListingsInBoundaryResponse>): grpc_1.ClientUnaryCall => {
            return super.GetListingsInBoundary(message, metadata, options, callback);
        };
    }
}
