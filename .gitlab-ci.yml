include:
  - component: gitlab.com/components/opentofu/validate-plan@2.0.0-rc1
    inputs:
      version: 2.0.0-rc1
      opentofu_version: 1.9.0
      root_dir: terraform/
      state_name: production
  - component: gitlab.com/components/opentofu/job-templates@2.0.0-rc1
    inputs:
      opentofu_version: 1.9.0

stages:
  - validate
  - build
  - deploy

compile:
  stage: build
  image: golang:latest
  script:
    - cd backend
    - go mod tidy
    - go build -o app ./cmd/main.go
  artifacts:
    paths:
      - app
    expire_in: 1 hour

apply:
  extends: [ .opentofu:apply ]
  stage: deploy
  script:
    - cd terraform
    - ls
    - echo "GCP_BUCKET_NAME=$(tofu output -raw gcp_bucket_name)" >> deploy.env
    - echo "GCP_PROJECT_ID=$(tofu output -raw gcp_project_id)" >> deploy.env
    - echo "GCP_ZONE=$(tofu output -raw gcp_zone)" >> deploy.env
    - cat deploy.env
  artifacts:
    reports:
      dotenv: deploy.env
  rules: [ { when: on_success } ]

migrate:
  stage: deploy
  needs: [ apply ]
  image: golang:latest
  before_script:
    - apt-get update && apt-get install -y curl unzip
    - if [ ! -f /usr/local/bin/migrate ]; then curl -L https://github.com/golang-migrate/migrate/releases/download/v4.18.2/migrate.linux-amd64.tar.gz | tar xvz && mv migrate /usr/local/bin/migrate; fi
  script:
    - migrate -path ./backend/internal/db/migrations -database $NEON_DATABASE_URL up

deploy:
  stage: deploy
  needs: [ apply, migrate ]
  image: google/cloud-sdk:latest
  script:
    - echo "$GCP_BUCKET_NAME"
    - echo $GCP_BUCKET_NAME
    - chmod +x ./deploy.sh
    - ./deploy.sh
