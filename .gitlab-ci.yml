workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

include:
  - component: gitlab.com/components/opentofu/validate-plan@2.0.0-rc1
    inputs:
      version: 2.0.0-rc1
      opentofu_version: 1.9.0
      root_dir: opentofu
  - component: gitlab.com/components/opentofu/job-templates@2.0.0-rc1
    inputs:
      version: 2.0.0-rc1
      opentofu_version: 1.9.0
      root_dir: opentofu

stages:
  - validate
  - build
  - plan
  - apply
  - deploy

compile_server:
  stage: build
  image: golang:1.24
  variables:
    CGO_ENABLED: "1"
    GOOS: linux
    GOARCH: amd64
  cache:
    key: go-mod-cache
    paths:
      - go/pkg/mod
  before_script:
    - apt-get update
    - apt-get install -y pkg-config libgeos-dev
    - go clean -modcache
  script:
    - cd server
    - go mod tidy
    - go build -o ../app ./cmd/main.go
  artifacts:
    name: "go-server-$CI_COMMIT_SHORT_SHA"
    paths:
      - app
    expire_in: 1 hour

apply:
  extends: [ .opentofu:apply ]
  after_script:
    - echo "EC2_INSTANCE_ID=$(gitlab-tofu output -raw server_id)" >> apply.env
    - echo "EC2_PUBLIC_IP=$(gitlab-tofu output -raw server_public_ip)" >> apply.env
    - echo "DATABASE_URL=$(gitlab-tofu output -raw database_url)" >> apply.env
    - echo "CLOUDFLARE_ACCOUNT_ID=$(gitlab-tofu output -raw cloudflare_account_id)" >> apply.env
    - echo "CLOUDFLARE_R2_ACCESS_KEY_ID=$(gitlab-tofu output -raw cloudflare_r2_access_key_id)" >> apply.env
    - echo "CLOUDFLARE_R2_ACCESS_SECRET_KEY=$(gitlab-tofu output -raw cloudflare_r2_access_secret_key)" >> apply.env
    - echo "CLOUDFLARE_BUCKET=$(gitlab-tofu output -raw cloudflare_bucket)" >> apply.env
  artifacts:
    reports:
      dotenv: apply.env
  rules:
    - when: on_success

deploy_server:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  needs:
    - job: apply
      artifacts: true
    - job: compile_server
  rules:
    - changes:
        - server/**/*
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP "sudo systemctl stop foreclosedhub.service || true"
    - scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no app ec2-user@$EC2_PUBLIC_IP:/home/ec2-user/
    - scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no apply.env ec2-user@$EC2_PUBLIC_IP:/home/ec2-user/
    - |
      ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_PUBLIC_IP <<-'EOF'
      echo '[Unit]
      Description=Go Server for ForeclosedHub
      After=network.target

      [Service]
      ExecStart=/home/ec2-user/app
      Restart=always
      User=ec2-user
      Group=ec2-user
      Environment=PATH=/usr/bin:/usr/local/bin
      Environment=GO_ENV=production
      EnvironmentFile=/home/ec2-user/apply.env
      WorkingDirectory=/home/ec2-user

      [Install]
      WantedBy=multi-user.target' | sudo tee /etc/systemd/system/foreclosedhub.service > /dev/null

      sudo systemctl daemon-reload
      sudo systemctl enable foreclosedhub.service
      sudo systemctl restart foreclosedhub.service
      EOF

deploy_web:
  stage: deploy
  image: node:23.10.0
  needs: [ apply ]
  rules:
    - changes:
       - web/**/*
      when: on_success
    - when: manual
      allow_failure: true
  script:
    - cd web
    - npm install --global vercel
    - vercel link --yes --project foreclosedhub --token=$TF_VAR_vercel_token
    - vercel pull --yes --environment=production --token=$TF_VAR_vercel_token
    - vercel build --prod --token=$TF_VAR_vercel_token
    - vercel deploy --prebuilt --prod --token=$TF_VAR_vercel_token